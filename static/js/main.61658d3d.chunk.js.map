{"version":3,"sources":["utils/serviceWorker.ts","services/coinGecko.ts","data/CoinContext.tsx","components/FetchCurrency/index.tsx","pages/Home/index.tsx","utils/config.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","coinId","a","path","fetch","result","json","coinGecko","getCoin","coinContext","createContext","fetchCoin","CoinContext","props","value","useCallback","console","log","Provider","children","FetchCurrency","useContext","useForm","handleSubmit","register","onSubmit","payload","currency","aria-label","id","name","aria-labelledby","ref","type","Home","config","routes","home","process","App","element","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,oGCVnC,WAAuBC,GAAvB,iBAAAC,EAAA,6DACQC,EADR,iDACyDF,GADzD,SAEuBG,IAAMD,GAF7B,cAEQE,EAFR,yBAISA,EAAOC,QAJhB,4C,sBAOeC,MAXG,CAChBC,Q,6CCIWC,EAAcC,wBAA+B,CACxDC,UAAW,eAmBEC,EAhBe,SAACC,GAC7B,IAKMC,EAAQ,CACZH,UANgBI,sBAAW,uCAAC,WAAOd,GAAP,eAAAC,EAAA,sEACPK,EAAUC,QAAQP,GADX,OACtBI,EADsB,OAE5BW,QAAQC,IAAI,SAAUZ,GAFM,2CAAD,sDAG1B,KAKH,OAAO,kBAACI,EAAYS,SAAb,CAAsBJ,MAAOA,GAAQD,EAAMM,WCDrCC,EAhBiB,WAAO,IAC7BT,EAAcU,qBAAWZ,GAAzBE,UAD4B,EAEDW,cAA3BC,EAF4B,EAE5BA,aAAcC,EAFc,EAEdA,SAKtB,OACE,0BAAMC,SAAUF,GALD,SAACG,GAChBf,EAAUe,EAAQC,aAIsBC,aAAW,kBACjD,2BAAOC,GAAG,kBAAV,YACA,2BAAOC,KAAK,WAAWC,kBAAgB,iBAAiBC,IAAKR,IAC7D,4BAAQS,KAAK,UAAb,YCJSC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCNOC,EAAS,CACpBC,OAAQ,CACNC,KAAK,GAAD,OAAKC,oBAAL,O,OCSR,SAASC,IACP,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOpC,KAAMgC,EAAOC,OAAOC,KAAMG,QAAS,kBAAC,EAAD,WAOpDC,IAASC,OAAO,kBAACH,EAAD,MAASI,SAASC,eAAe,SN6G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.61658d3d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import fetch from 'isomorphic-fetch'\nimport { Coin } from './coin'\n\nconst coinGecko = {\n  getCoin,\n}\n\nasync function getCoin(coinId: string): Promise<Coin> {\n  const path = `https://api.coingecko.com/api/v3/coins/${coinId}`\n  const result = await fetch(path)\n\n  return result.json()\n}\n\nexport default coinGecko\n","import React, { createContext, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport coinGecko from '../services/coinGecko'\n\ninterface CoinContextData {\n  fetchCoin: (coinId: string) => void\n}\n\nexport const coinContext = createContext<CoinContextData>({\n  fetchCoin: () => undefined,\n})\n\nconst CoinContext: React.FC = (props) => {\n  const fetchCoin = useCallback(async (coinId: string) => {\n    const result = await coinGecko.getCoin(coinId)\n    console.log('result', result)\n  }, [])\n\n  const value = {\n    fetchCoin,\n  }\n  return <coinContext.Provider value={value}>{props.children}</coinContext.Provider>\n}\n\nCoinContext.propTypes = {\n  children: PropTypes.node,\n}\n\nexport default CoinContext\n","import React, { useContext } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { coinContext } from '../../data/CoinContext'\n\nconst FetchCurrency: React.FC = () => {\n  const { fetchCoin } = useContext(coinContext)\n  const { handleSubmit, register } = useForm()\n  const onSubmit = (payload: { currency: string }) => {\n    fetchCoin(payload.currency)\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} aria-label=\"fetch-currency\">\n      <label id=\"label-currency\">Currency</label>\n      <input name=\"currency\" aria-labelledby=\"label-currency\" ref={register} />\n      <button type=\"submit\">Submit</button>\n    </form>\n  )\n}\n\nexport default FetchCurrency\n","import React from 'react'\nimport FetchCurrency from '../../components/FetchCurrency'\n\nfunction Home(): JSX.Element {\n  return (\n    <div>\n      <FetchCurrency />\n    </div>\n  )\n}\n\nexport default Home\n","export const config = {\n  routes: {\n    home: `${process.env.PUBLIC_URL}/`,\n  },\n} as const\n","import 'react-app-polyfill/stable'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom'\n\nimport * as serviceWorker from './utils/serviceWorker'\nimport Home from './pages/Home'\nimport { config } from './utils/config'\nimport CoinContext from './data/CoinContext'\nimport './index.css'\n\nfunction App(): JSX.Element {\n  return (\n    <CoinContext>\n      <Router>\n        <Routes>\n          <Route path={config.routes.home} element={<Home />} />\n        </Routes>\n      </Router>\n    </CoinContext>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}