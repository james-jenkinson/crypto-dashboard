{"version":3,"sources":["utils/serviceWorker.ts","services/coinGecko.ts","data/common.ts","data/coin.reducer.ts","data/CoinContext.tsx","data/coin.selector.ts","components/CoinDetails/index.tsx","components/FetchCurrency/index.tsx","components/LoadingIndicator/index.tsx","pages/Home/index.tsx","utils/config.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","coinId","a","path","fetch","result","json","coinGecko","AsyncActionStatus","getCoin","initialState","status","Initial","coinData","undefined","reducer","state","action","type","Loading","Ready","payload","data","Error","coinReducer","useReducer","coinContext","createContext","fetchCoin","isLoading","coin","CoinContext","props","dispatch","useCallback","error","useMemo","name","image","thumb","symbol","currentPriceUsd","market_data","current_price","usd","marketCapRank","market_cap_rank","percentagePriceChange24h","price_change_percentage_24h","coinSelector","selectCoin","value","Provider","children","CoinDetails","useContext","alt","src","FetchCurrency","useForm","handleSubmit","register","onSubmit","currency","aria-label","id","aria-labelledby","ref","LoadingSpinner","className","Home","config","routes","home","process","App","element","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4a778dbc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import fetch from 'isomorphic-fetch'\nimport { CoinResponse } from './coin'\n\nconst coinGecko = {\n  getCoin,\n}\n\nasync function getCoin(coinId: string): Promise<CoinResponse> {\n  const path = `https://api.coingecko.com/api/v3/coins/${coinId}?tickers=false&community_data=false&developer_data=false&sparkline=false`\n  const result = await fetch(path)\n\n  return result.json()\n}\n\nexport default coinGecko\n","export enum AsyncActionStatus {\n  Initial = 'initial',\n  Loading = 'loading',\n  Error = 'error',\n  Ready = 'ready',\n}\n","import { useReducer } from 'react'\nimport { CoinResponse } from '../services/coin'\nimport { AsyncActionStatus } from './common'\n\nexport interface ReducerState {\n  status: AsyncActionStatus\n  coinData: CoinResponse | undefined\n}\n\nconst initialState: ReducerState = {\n  status: AsyncActionStatus.Initial,\n  coinData: undefined,\n}\n\ntype ReducerAction =\n  | { type: 'FETCH_COIN_START'; payload: { coinId: string } }\n  | { type: 'FETCH_COIN_SUCCESS'; payload: { coinId: string; data: CoinResponse } }\n  | { type: 'FETCH_COIN_ERROR'; payload: { coinId: string; error: Error } }\n\nconst reducer = (state: ReducerState, action: ReducerAction): ReducerState => {\n  switch (action.type) {\n    case 'FETCH_COIN_START':\n      return {\n        ...state,\n        status: AsyncActionStatus.Loading,\n        coinData: undefined,\n      }\n    case 'FETCH_COIN_SUCCESS':\n      return {\n        ...state,\n        status: AsyncActionStatus.Ready,\n        coinData: action.payload.data,\n      }\n    case 'FETCH_COIN_ERROR':\n      return {\n        ...state,\n        status: AsyncActionStatus.Error,\n      }\n    default:\n      return state\n  }\n}\n\nconst coinReducer: Reducer<ReducerState, ReducerAction> = () => useReducer(reducer, initialState)\n\nexport default coinReducer\n","import React, { createContext, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport coinGecko from '../services/coinGecko'\nimport coinReducer from './coin.reducer'\nimport { AsyncActionStatus } from './common'\nimport { Coin } from './coin'\nimport { selectCoin } from './coin.selector'\n\ninterface CoinContextData {\n  fetchCoin: (coinId: string) => void\n  isLoading: boolean\n  coin: Coin | undefined\n}\n\nexport const coinContext = createContext<CoinContextData>({\n  fetchCoin: () => undefined,\n  isLoading: false,\n  coin: undefined,\n})\n\nconst CoinContext: React.FC = (props) => {\n  const [state, dispatch] = coinReducer()\n\n  const fetchCoin = useCallback(async (coinId: string) => {\n    dispatch({ type: 'FETCH_COIN_START', payload: { coinId } })\n    try {\n      const result = await coinGecko.getCoin(coinId)\n      dispatch({ type: 'FETCH_COIN_SUCCESS', payload: { coinId, data: result } })\n    } catch (error) {\n      dispatch({ type: 'FETCH_COIN_ERROR', payload: { coinId, error } })\n    }\n  }, [])\n\n  const coin = selectCoin(state)\n\n  const value = {\n    fetchCoin,\n    isLoading: state.status === AsyncActionStatus.Loading,\n    coin,\n  }\n  return <coinContext.Provider value={value}>{props.children}</coinContext.Provider>\n}\n\nCoinContext.propTypes = {\n  children: PropTypes.node,\n}\n\nexport default CoinContext\n","import { useMemo } from 'react'\nimport { CoinResponse } from '../services/coin'\nimport { Coin } from './coin'\nimport { ReducerState as CoinReducerState } from './coin.reducer'\n\nexport const coinSelector = (coinData: CoinResponse): Coin => {\n  return {\n    name: coinData.name,\n    image: coinData.image?.thumb,\n    symbol: coinData.symbol,\n    currentPriceUsd: `$${coinData.market_data?.current_price?.usd}`,\n    marketCapRank: coinData.market_cap_rank,\n    percentagePriceChange24h: coinData.market_data?.price_change_percentage_24h,\n  }\n}\n\nexport const selectCoin = (state: CoinReducerState): Coin | undefined =>\n  useMemo(() => {\n    if (!state.coinData) {\n      return undefined\n    }\n    return coinSelector(state.coinData)\n  }, [state.coinData])\n","import React, { useContext } from 'react'\nimport { coinContext } from '../../data/CoinContext'\n\nconst CoinDetails: React.FC = () => {\n  const { coin } = useContext(coinContext)\n  if (!coin) {\n    return null\n  }\n\n  return (\n    <>\n      <img alt={`Logo for ${coin.name}`} src={coin.image}></img>\n      <table>\n        <caption>Details for {coin.name}</caption>\n        <tbody>\n          <tr>\n            <th>Marketcap rank</th>\n            <td>{coin.marketCapRank}</td>\n          </tr>\n          <tr>\n            <th>Name</th>\n            <td>{coin.name}</td>\n          </tr>\n          <tr>\n            <th>Price (USD)</th>\n            <td>{coin.currentPriceUsd}</td>\n          </tr>\n          <tr>\n            <th>Symbol</th>\n            <td>{coin.symbol}</td>\n          </tr>\n          <tr>\n            <th>Price change over last 24 hours</th>\n            <td>{coin.percentagePriceChange24h}</td>\n          </tr>\n        </tbody>\n      </table>\n    </>\n  )\n}\n\nexport default CoinDetails\n","import React, { useContext } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { coinContext } from '../../data/CoinContext'\n\nconst FetchCurrency: React.FC = () => {\n  const { fetchCoin } = useContext(coinContext)\n  const { handleSubmit, register } = useForm()\n  const onSubmit = (payload: { currency: string }) => {\n    fetchCoin(payload.currency)\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} aria-label=\"fetch-currency\">\n      <label id=\"label-currency\">Currency</label>\n      <input name=\"currency\" aria-labelledby=\"label-currency\" ref={register} />\n      <button type=\"submit\">Submit</button>\n    </form>\n  )\n}\n\nexport default FetchCurrency\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './loadingIndicator.css'\n\ninterface Props {\n  isLoading: boolean\n}\n\nconst LoadingSpinner: React.FC<Props> = (props) => {\n  return <>{props.isLoading && <div className=\"loading-indicator\" aria-label=\"loading\"></div>}</>\n}\n\nLoadingSpinner.propTypes = {\n  isLoading: PropTypes.bool.isRequired,\n}\n\nexport default LoadingSpinner\n","import React, { useContext } from 'react'\nimport CoinDetails from '../../components/CoinDetails'\nimport FetchCurrency from '../../components/FetchCurrency'\nimport LoadingSpinner from '../../components/LoadingIndicator'\nimport { coinContext } from '../../data/CoinContext'\n\nfunction Home(): JSX.Element {\n  const { isLoading } = useContext(coinContext)\n\n  return (\n    <div>\n      <FetchCurrency />\n      <LoadingSpinner isLoading={isLoading} />\n      <CoinDetails />\n    </div>\n  )\n}\n\nexport default Home\n","export const config = {\n  routes: {\n    home: `${process.env.PUBLIC_URL}/`,\n  },\n} as const\n","import 'react-app-polyfill/stable'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom'\n\nimport * as serviceWorker from './utils/serviceWorker'\nimport Home from './pages/Home'\nimport { config } from './utils/config'\nimport CoinContext from './data/CoinContext'\nimport './index.css'\n\nfunction App(): JSX.Element {\n  return (\n    <CoinContext>\n      <Router>\n        <Routes>\n          <Route path={config.routes.home} element={<Home />} />\n        </Routes>\n      </Router>\n    </CoinContext>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}