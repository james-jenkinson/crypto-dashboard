{"version":3,"sources":["utils/serviceWorker.ts","services/coinGecko.ts","data/common.ts","data/coin.reducer.ts","data/coin.selector.ts","data/searchHistory.ts","data/CoinContext.tsx","components/CoinDetails/index.tsx","components/FetchCurrency/index.tsx","components/LoadingIndicator/index.tsx","components/MarketPlot/index.tsx","components/PastSearches/index.tsx","pages/Home/index.tsx","utils/config.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","coinId","a","path","fetch","result","json","coinGecko","AsyncActionStatus","getCoin","getMarketData","initialState","status","Initial","coinData","undefined","marketData","searchHistory","reducer","state","action","type","Loading","Ready","payload","data","Error","coinReducer","useReducer","selectMarketData","useMemo","prices","Array","length","timestamps","forEach","price","i","Date","marketDataSelector","db","Dexie","version","stores","previousSearches","searchTable","table","saveSearchTerm","term","query","where","count","modify","timestamp","now","add","getPastSearches","orderBy","reverse","toArray","coinContext","createContext","fetchCoin","fetchMarketData","isLoading","pastSearches","coin","CoinContext","props","dispatch","useEffect","then","searches","useCallback","error","name","image","thumb","symbol","currentPriceUsd","market_data","current_price","usd","marketCapRank","market_cap_rank","percentagePriceChange24h","price_change_percentage_24h","positiveChange","coinSelector","selectCoin","value","Provider","children","CoinDetails","useContext","priceIndicatorClassName","alt","src","className","FetchCurrency","useForm","handleSubmit","register","onSubmit","currency","aria-label","id","aria-labelledby","ref","LoadingSpinner","MarketPlot","x","y","mode","marker","color","layout","width","height","title","PastSearches","map","search","key","Home","config","routes","home","process","App","element","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.51ba52c7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import fetch from 'isomorphic-fetch'\nimport { CoinResponse, MarketDataResponse } from './coin'\n\nconst coinGecko = {\n  getCoin,\n  getMarketData,\n}\n\nasync function getCoin(coinId: string): Promise<CoinResponse> {\n  const path = `https://api.coingecko.com/api/v3/coins/${coinId}?tickers=false&community_data=false&developer_data=false&sparkline=false`\n  const result = await fetch(path)\n\n  return result.json()\n}\n\nasync function getMarketData(coinId: string): Promise<MarketDataResponse> {\n  const path = `https://api.coingecko.com/api/v3/coins/${coinId}/market_chart?vs_currency=usd&days=7`\n  const result = await fetch(path)\n\n  return result.json()\n}\n\nexport default coinGecko\n","export enum AsyncActionStatus {\n  Initial = 'initial',\n  Loading = 'loading',\n  Error = 'error',\n  Ready = 'ready',\n}\n","import { useReducer } from 'react'\nimport { CoinResponse, MarketDataResponse } from '../services/coin'\nimport { AsyncActionStatus } from './common'\nimport { Search } from './searchHistory'\n\nexport interface ReducerState {\n  status: AsyncActionStatus\n  coinData: CoinResponse | undefined\n  searchHistory: Search[]\n  marketData: MarketDataResponse | undefined\n}\n\nconst initialState: ReducerState = {\n  status: AsyncActionStatus.Initial,\n  coinData: undefined,\n  marketData: undefined,\n  searchHistory: [],\n}\n\ntype ReducerAction =\n  | { type: 'FETCH_COIN_START'; payload: { coinId: string } }\n  | { type: 'FETCH_COIN_SUCCESS'; payload: { coinId: string; data: CoinResponse } }\n  | { type: 'FETCH_COIN_ERROR'; payload: { coinId: string; error: Error } }\n  | { type: 'UPDATE_SEARCH_HISTORY'; payload: { data: Search[] } }\n  | { type: 'FETCH_MARKET_DATA_SUCCESS'; payload: { data: MarketDataResponse } }\n\nconst reducer = (state: ReducerState, action: ReducerAction): ReducerState => {\n  switch (action.type) {\n    case 'FETCH_COIN_START':\n      return {\n        ...state,\n        status: AsyncActionStatus.Loading,\n        coinData: undefined,\n      }\n    case 'FETCH_COIN_SUCCESS':\n      return {\n        ...state,\n        status: AsyncActionStatus.Ready,\n        coinData: action.payload.data,\n      }\n    case 'FETCH_COIN_ERROR':\n      return {\n        ...state,\n        status: AsyncActionStatus.Error,\n      }\n    case 'UPDATE_SEARCH_HISTORY':\n      return {\n        ...state,\n        searchHistory: action.payload.data,\n      }\n    case 'FETCH_MARKET_DATA_SUCCESS':\n      return {\n        ...state,\n        marketData: action.payload.data,\n      }\n    default:\n      return state\n  }\n}\n\nconst coinReducer: Reducer<ReducerState, ReducerAction> = () => useReducer(reducer, initialState)\n\nexport default coinReducer\n","import { useMemo } from 'react'\nimport { CoinResponse, MarketDataResponse } from '../services/coin'\nimport { Coin, MarketData } from './coin'\nimport { ReducerState as CoinReducerState } from './coin.reducer'\n\nexport const coinSelector = (coinData: CoinResponse): Coin => {\n  return {\n    name: coinData.name,\n    image: coinData.image?.thumb,\n    symbol: coinData.symbol,\n    currentPriceUsd: `$${coinData.market_data?.current_price?.usd}`,\n    marketCapRank: coinData.market_cap_rank,\n    percentagePriceChange24h: coinData.market_data?.price_change_percentage_24h,\n    positiveChange: coinData.market_data?.price_change_percentage_24h >= 0,\n  }\n}\n\nexport const selectCoin = (state: CoinReducerState): Coin | undefined =>\n  useMemo(() => {\n    if (!state.coinData) {\n      return undefined\n    }\n    return coinSelector(state.coinData)\n  }, [state.coinData])\n\nexport const marketDataSelector = (marketData: MarketDataResponse): MarketData => {\n  const prices = new Array(marketData.prices.length) as Array<number>\n  const timestamps = new Array(marketData.prices.length) as Array<Date>\n\n  marketData.prices.forEach((price, i) => {\n    timestamps[i] = new Date(price[0])\n    prices[i] = price[1]\n  })\n\n  return {\n    prices,\n    timestamps,\n  }\n}\n\nexport const selectMarketData = (state: CoinReducerState): MarketData | undefined =>\n  useMemo(() => {\n    if (!state.marketData) {\n      return\n    }\n    return marketDataSelector(state.marketData)\n  }, [state.marketData])\n","import Dexie from 'dexie'\n\nexport interface Search {\n  term: string\n  timestamp: number\n}\nconst db = new Dexie('CoinDashboardDatabase')\n\ndb.version(1).stores({\n  previousSearches: '++_id, &term, timestamp',\n})\n\nexport const searchTable = db.table<Search>('previousSearches')\n\nexport const saveSearchTerm = async (term: string): Promise<void> => {\n  const query = searchTable.where({ term })\n  if ((await query.count()) > 0) {\n    await query.modify({ timestamp: Date.now() })\n  } else {\n    searchTable.add({ term, timestamp: Date.now() })\n  }\n}\n\nexport const getPastSearches = (): Promise<Search[]> => {\n  return searchTable.orderBy('timestamp').reverse().toArray()\n}\n","import React, { createContext, useCallback, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport coinGecko from '../services/coinGecko'\nimport coinReducer from './coin.reducer'\nimport { AsyncActionStatus } from './common'\nimport { Coin, MarketData } from './coin'\nimport { selectCoin, selectMarketData } from './coin.selector'\nimport { getPastSearches, saveSearchTerm } from './searchHistory'\n\ninterface CoinContextData {\n  fetchCoin: (coinId: string) => void\n  fetchMarketData: (coinId: string) => void\n  isLoading: boolean\n  pastSearches: Array<{ term: string; timestamp: number }>\n  coin: Coin | undefined\n  marketData: MarketData | undefined\n}\n\nexport const coinContext = createContext<CoinContextData>({\n  fetchCoin: () => undefined,\n  fetchMarketData: () => undefined,\n  isLoading: false,\n  pastSearches: [],\n  coin: undefined,\n  marketData: undefined,\n})\n\nconst CoinContext: React.FC = (props) => {\n  const [state, dispatch] = coinReducer()\n\n  useEffect(() => {\n    getPastSearches().then((searches) =>\n      dispatch({ type: 'UPDATE_SEARCH_HISTORY', payload: { data: searches } }),\n    )\n  }, [])\n\n  const fetchCoin = useCallback(async (coinId: string) => {\n    dispatch({ type: 'FETCH_COIN_START', payload: { coinId } })\n    try {\n      const result = await coinGecko.getCoin(coinId)\n      saveSearchTerm(coinId).then(async () => {\n        const searches = await getPastSearches()\n        dispatch({ type: 'UPDATE_SEARCH_HISTORY', payload: { data: searches } })\n      })\n      dispatch({ type: 'FETCH_COIN_SUCCESS', payload: { coinId, data: result } })\n    } catch (error) {\n      dispatch({ type: 'FETCH_COIN_ERROR', payload: { coinId, error } })\n    }\n  }, [])\n\n  const fetchMarketData = useCallback(async (coinId: string) => {\n    const result = await coinGecko.getMarketData(coinId)\n    dispatch({ type: 'FETCH_MARKET_DATA_SUCCESS', payload: { data: result } })\n  }, [])\n\n  const coin = selectCoin(state)\n  const marketData = selectMarketData(state)\n\n  const value = {\n    fetchCoin,\n    fetchMarketData,\n    isLoading: state.status === AsyncActionStatus.Loading,\n    pastSearches: state.searchHistory,\n    coin,\n    marketData,\n  }\n  return <coinContext.Provider value={value}>{props.children}</coinContext.Provider>\n}\n\nCoinContext.propTypes = {\n  children: PropTypes.node,\n}\n\nexport default CoinContext\n","import React, { useContext } from 'react'\nimport { coinContext } from '../../data/CoinContext'\nimport './coinDetails.css'\n\nconst CoinDetails: React.FC = () => {\n  const { coin } = useContext(coinContext)\n  if (!coin) {\n    return null\n  }\n\n  const priceIndicatorClassName = coin.positiveChange\n    ? 'coin-details__price-indicator--positive'\n    : 'coin-details__price-indicator--negative'\n\n  return (\n    <>\n      <table>\n        <caption>\n          Details for {coin.name}\n          <img alt={`Logo for ${coin.name}`} src={coin.image}></img>\n        </caption>\n        <tbody>\n          <tr>\n            <th>Marketcap rank</th>\n            <td>{coin.marketCapRank}</td>\n          </tr>\n          <tr>\n            <th>Name</th>\n            <td>{coin.name}</td>\n          </tr>\n          <tr>\n            <th>Price (USD)</th>\n            <td className={priceIndicatorClassName}>{coin.currentPriceUsd}</td>\n          </tr>\n          <tr>\n            <th>Symbol</th>\n            <td>{coin.symbol}</td>\n          </tr>\n          <tr>\n            <th>Price change over last 24 hours</th>\n            <td className={priceIndicatorClassName}>{coin.percentagePriceChange24h}</td>\n          </tr>\n        </tbody>\n      </table>\n    </>\n  )\n}\n\nexport default CoinDetails\n","import React, { useContext } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { coinContext } from '../../data/CoinContext'\n\nconst FetchCurrency: React.FC = () => {\n  const { fetchCoin, fetchMarketData } = useContext(coinContext)\n  const { handleSubmit, register } = useForm()\n  const onSubmit = (payload: { currency: string }) => {\n    fetchCoin(payload.currency)\n    fetchMarketData(payload.currency)\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} aria-label=\"fetch-currency\">\n      <label id=\"label-currency\">Currency</label>\n      <input name=\"currency\" aria-labelledby=\"label-currency\" ref={register} />\n      <button type=\"submit\">Submit</button>\n    </form>\n  )\n}\n\nexport default FetchCurrency\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './loadingIndicator.css'\n\ninterface Props {\n  isLoading: boolean\n}\n\nconst LoadingSpinner: React.FC<Props> = (props) => {\n  return <>{props.isLoading && <div className=\"loading-indicator\" aria-label=\"loading\"></div>}</>\n}\n\nLoadingSpinner.propTypes = {\n  isLoading: PropTypes.bool.isRequired,\n}\n\nexport default LoadingSpinner\n","import React, { useContext } from 'react'\nimport Plot from 'react-plotly.js'\nimport { coinContext } from '../../data/CoinContext'\n\nconst MarketPlot: React.FC = () => {\n  const { marketData, coin } = useContext(coinContext)\n\n  if (!marketData) {\n    return null\n  }\n  return (\n    <Plot\n      data={[\n        {\n          x: marketData?.timestamps,\n          y: marketData?.prices,\n          type: 'scatter',\n          mode: 'lines+markers',\n          marker: { color: 'red' },\n        },\n      ]}\n      layout={{ width: 800, height: 600, title: `Changes in ${coin?.name} over last 7 days` }}\n    />\n  )\n}\n\nexport default MarketPlot\n","import React, { useContext } from 'react'\nimport { coinContext } from '../../data/CoinContext'\n\nconst PastSearches: React.FC = () => {\n  const { pastSearches } = useContext(coinContext)\n\n  return (\n    <ul>\n      {pastSearches.map((search) => (\n        <li key={search.term}>{search.term}</li>\n      ))}\n    </ul>\n  )\n}\n\nexport default PastSearches\n","import React, { useContext } from 'react'\nimport CoinDetails from '../../components/CoinDetails'\nimport FetchCurrency from '../../components/FetchCurrency'\nimport LoadingSpinner from '../../components/LoadingIndicator'\nimport MarketPlot from '../../components/MarketPlot'\nimport PastSearches from '../../components/PastSearches'\nimport { coinContext } from '../../data/CoinContext'\n\nfunction Home(): JSX.Element {\n  const { isLoading } = useContext(coinContext)\n\n  return (\n    <div>\n      <FetchCurrency />\n      <PastSearches />\n      <LoadingSpinner isLoading={isLoading} />\n      <CoinDetails />\n      <MarketPlot />\n    </div>\n  )\n}\n\nexport default Home\n","export const config = {\n  routes: {\n    home: `${process.env.PUBLIC_URL}/`,\n  },\n} as const\n","import 'react-app-polyfill/stable'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom'\n\nimport * as serviceWorker from './utils/serviceWorker'\nimport Home from './pages/Home'\nimport { config } from './utils/config'\nimport CoinContext from './data/CoinContext'\nimport './index.css'\n\nfunction App(): JSX.Element {\n  return (\n    <CoinContext>\n      <Router>\n        <Routes>\n          <Route path={config.routes.home} element={<Home />} />\n        </Routes>\n      </Router>\n    </CoinContext>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}